// <auto-generated />
using System;
using Inventoryapi.Services;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Inventoryapi.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Inventoryapi.Models.PurchaseOrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("InventoryItemId")
                        .HasColumnType("int");

                    b.Property<int>("PurchaseOrderId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PurchaseOrderId");

                    b.ToTable("PurchaseOrderItems");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            InventoryItemId = 1,
                            PurchaseOrderId = 1,
                            Quantity = 2
                        },
                        new
                        {
                            Id = 2,
                            InventoryItemId = 3,
                            PurchaseOrderId = 1,
                            Quantity = 1
                        },
                        new
                        {
                            Id = 3,
                            InventoryItemId = 1,
                            PurchaseOrderId = 2,
                            Quantity = 1
                        },
                        new
                        {
                            Id = 4,
                            InventoryItemId = 4,
                            PurchaseOrderId = 2,
                            Quantity = 2
                        });
                });

            modelBuilder.Entity("MyStore.Models.InventoryItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsSaleItem")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("Sku")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StorageLocation")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("InventoryItems");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "#2 pencil",
                            IsSaleItem = false,
                            Name = "Pencil",
                            Price = 0.5,
                            Quantity = 100,
                            Sku = "38830982031",
                            StorageLocation = "A1"
                        },
                        new
                        {
                            Id = 2,
                            Description = "spiral notebook",
                            IsSaleItem = false,
                            Name = "Notebook",
                            Price = 1.5,
                            Quantity = 50,
                            Sku = "3881111131",
                            StorageLocation = "A2"
                        },
                        new
                        {
                            Id = 3,
                            Description = "3 ring binder with dividers",
                            IsSaleItem = false,
                            Name = "Binder",
                            Price = 4.5,
                            Quantity = 5,
                            Sku = "54830982031",
                            StorageLocation = "A2"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Scientific calculator",
                            IsSaleItem = false,
                            Name = "Ti83+ Calculator",
                            Price = 49.0,
                            Quantity = 100,
                            Sku = "3889462031",
                            StorageLocation = "A4"
                        },
                        new
                        {
                            Id = 5,
                            Description = "black ball point pen",
                            IsSaleItem = false,
                            Name = "Pen",
                            Price = 0.5,
                            Quantity = 10,
                            Sku = "388309867",
                            StorageLocation = "A1"
                        },
                        new
                        {
                            Id = 6,
                            Description = "metallic coaster",
                            IsSaleItem = false,
                            Name = "Coaster",
                            Price = 5.5,
                            Quantity = 1,
                            Sku = "388309212",
                            StorageLocation = "A6"
                        },
                        new
                        {
                            Id = 7,
                            Description = "Fuzzy backpack",
                            IsSaleItem = false,
                            Name = "Backpack",
                            Price = 25.489999999999998,
                            Quantity = 100,
                            Sku = "388309987",
                            StorageLocation = "A5"
                        });
                });

            modelBuilder.Entity("MyStore.Models.PaymentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PaymentTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Cash"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Credit"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Debit"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Check"
                        },
                        new
                        {
                            Id = 5,
                            Name = "GiftCard"
                        });
                });

            modelBuilder.Entity("MyStore.Models.PurchaseOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Datetime")
                        .HasColumnType("datetime2");

                    b.Property<string>("NameOfBuyer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PaymentTypeId")
                        .HasColumnType("int");

                    b.Property<double>("SalesTax")
                        .HasColumnType("float");

                    b.Property<string>("StripeSessionId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Subtotal")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("PaymentTypeId");

                    b.ToTable("PurchaseOrders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Datetime = new DateTime(2020, 3, 17, 16, 9, 37, 440, DateTimeKind.Local).AddTicks(5670),
                            NameOfBuyer = "John Doe",
                            PaymentTypeId = 1,
                            SalesTax = 0.45000000000000001,
                            Subtotal = 5.5
                        },
                        new
                        {
                            Id = 2,
                            Datetime = new DateTime(2020, 3, 16, 16, 9, 37, 440, DateTimeKind.Local).AddTicks(8140),
                            NameOfBuyer = "Mildred Smith",
                            PaymentTypeId = 3,
                            SalesTax = 6.3499999999999996,
                            Subtotal = 98.5
                        });
                });

            modelBuilder.Entity("Inventoryapi.Models.PurchaseOrderItem", b =>
                {
                    b.HasOne("MyStore.Models.PurchaseOrder", null)
                        .WithMany("PurchaseOrderItems")
                        .HasForeignKey("PurchaseOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyStore.Models.PurchaseOrder", b =>
                {
                    b.HasOne("MyStore.Models.PaymentType", "PaymentType")
                        .WithMany()
                        .HasForeignKey("PaymentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
